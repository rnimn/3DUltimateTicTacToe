{"version":3,"sources":["CubeCreation.js","CubeRendering.js","App.js","index.js"],"names":["createSubCube","xOffset","yOffset","zOffset","localName","geometry","BoxGeometry","subCube","Group","row","column","cell","material","MeshBasicMaterial","color","transparent","opacity","cube","Mesh","position","set","name","getSubName","add","coords","renderer","WebGLRenderer","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","rayCaster","OrbitControls","domElement","Raycaster","emptyCubes","fullMatrix","smallCubes","createFullCube","currentTurn","mouseRay","Vector2","allCubes","nextTurnLocation","children","map","cubeGroup","push","rotation","x","z","background","Color","setSize","document","body","appendChild","FullMatrixRender","animate","requestAnimationFrame","render","useEffect","addEventListener","e","updateMouseRay","handleButtonPress","event","updatedRay","clientX","y","clientY","code","setFromCamera","targetedCubes","intersectObjects","length","targetCube","targetSubcubeId","object","toggleCube","setSubcubeColor","i","currentColor","getHex","App","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e2b8b3de.chunk.js","sourcesContent":["import {BoxGeometry, MeshBasicMaterial, Mesh, Group} from 'three';\n\n//Create 3x3 set of cubes\nconst createSubCube = (xOffset, yOffset, zOffset, localName) => {\n\n    const geometry = new BoxGeometry(1, 1, 1);\n    const subCube = new Group();\n    \n    for (let row = 0; row < 3; row ++){\n        for (let column = 0; column < 3; column++){\n            for (let cell = 0; cell < 3; cell++){\n\n                var material = new MeshBasicMaterial( { color: \"#ababab\" , transparent: true, opacity: \"0.5\"} );\n\n                var cube = new Mesh( geometry, material );\n                cube.position.set((row - 1)*1.5 + xOffset, (column - 1)*1.5 + yOffset, (cell - 1)*1.5 + zOffset);\n                cube.name = getSubName([row, column, cell]) + (localName * 27);\n\n                subCube.add(cube);\n            }\n        }\n    }\n\n    return(subCube);\n\n}\n\n\n//Create 3x3 set of 3x3 sets of cubes\nexport const createFullCube = () => {\n    \n    const fullMatrix = new Group();\n    \n    for (let row = 0; row < 3; row ++){\n        for (let column = 0; column < 3; column++){\n            for (let cell = 0; cell < 3; cell++){\n\n                var localName = getSubName([row, column, cell]);\n                var smallCubes = createSubCube((row - 1)*7, (column - 1)*7, (cell - 1)*7, localName);\n                fullMatrix.add(smallCubes);\n\n            }\n        }\n    }\n\n    return(fullMatrix);\n\n}\n\n//Map coordinates of 9x9x9 cubes to integer id from 1-729\n//Takes coordinates of sub cube, coordinates of individual cube\nexport const getName = (largeCoords, smallCords)=> {\n\n    var id = (largeCoords[0] * 9 + largeCoords[1] * 3 + largeCoords[2]) * 27; \n    id += (smallCords[0] * 9 + smallCords[1] * 3 + smallCords[2]);\n    return(id);\n\n}\n\n//Map coordinates of 3x3x3 cubes to integer id from 1-27\nexport const getSubName = (coords) => {\n\n    const id = coords[0] * 9 + coords[1] * 3 + coords[2]; \n    return(id)\n\n}","import {Scene, PerspectiveCamera, WebGLRenderer, Color, TorusGeometry, Mesh, MeshBasicMaterial, Raycaster, Vector2} from \"three\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport {createFullCube, getName, getSubName} from './CubeCreation';\nimport { useEffect, useState, useMemo } from \"react\";\nimport React from 'react'\n\n//ThreeJS rendering initialization\nconst renderer = new WebGLRenderer();\nconst scene = new Scene();\nconst camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\nconst controls = new OrbitControls(camera, renderer.domElement);\nconst rayCaster = new Raycaster();\nconst emptyCubes = createFullCube();\nvar currentTurn = \"Blue\";\nvar mouseRay = new Vector2();\nconst allCubes = [];\nvar nextTurnLocation = getSubName([1,1,1]);\n\nemptyCubes.children.map(cubeGroup => {\n  cubeGroup.children.map(cube => {\n    allCubes.push(cube);\n  })\n})\n\nemptyCubes.rotation.x = 3.14 / 7;\ncamera.position.z = 50;\nscene.add(emptyCubes);\nscene.background = new Color('#f0ecc5');\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild( renderer.domElement );\n\n\nexport const FullMatrixRender = () => {\n\n  function animate() {\n    requestAnimationFrame( animate );\n    renderer.render( scene, camera );\n  }\n  animate();\n\n  renderer.render( scene, camera );\n\n  useEffect(() => {\n\n    window.addEventListener('mousemove', (e) => updateMouseRay(e)); \n    window.addEventListener('keyup', (e) => handleButtonPress(e)); \n    \n  }, []);\n  const updateMouseRay = (event ) => {\n    const updatedRay = new Vector2;\n    updatedRay.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n    updatedRay.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n    mouseRay = updatedRay;\n  }\n\n\n  const handleButtonPress = (event) => {\n    if (event.code === \"Space\"){\n      rayCaster.setFromCamera( mouseRay, camera );\n      const targetedCubes = rayCaster.intersectObjects( allCubes );\n\n      if (targetedCubes.length === 0){\n        return false;\n      }\n      const targetCube = targetedCubes[0];\n\n      const targetSubcubeId = ((targetCube.object.name - (targetCube.object.name % 27)) / 27);\n\n      if(nextTurnLocation === targetSubcubeId){\n\n        toggleCube(targetCube);\n\n        setSubcubeColor(nextTurnLocation, \"#ababab\");\n        nextTurnLocation = (targetCube.object.name % 27);\n        setSubcubeColor(nextTurnLocation, \"#94f77e\");\n\n      }\n    }\n  }\n\n  const toggleCube = (cube) => {\n    if (currentTurn == \"Blue\"){\n      cube.object.material.color.set( 0x0000ff );\n      currentTurn = (\"Red\");\n    } else {\n      cube.object.material.color.set( 0xff0000 );\n      currentTurn = (\"Blue\"); \n    }\n  }\n\n  const setSubcubeColor = (subCube, color) => {\n    for (var i = 0; i < 27; i ++){\n      var currentColor = allCubes[i + (subCube * 27)].material.color.getHex();\n      if (currentColor === 11250603 || currentColor === 9762686){\n        allCubes[i + (subCube * 27)].material.color.set(color);\n      }\n    }\n  }  \n  \n  return (\n    <>\n    </>\n  )\n}","import { FullMatrixRender } from \"./CubeRendering\";\nimport { useState, useEffect } from \"react\";\n\n\nfunction App() {\n\n  \n\n\n\n\n  return <>\n    <FullMatrixRender/> \n  </>; \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}